#!/usr/bin/env ruby

require "tempfile"
require "optparse"
require "poppler"
require "gdk_pixbuf2"
require 'fileutils'

page = 0
scale = 1.0
rotate = 0


def compute_size(width, height, rotate)
  width = width.to_f
  height = height.to_f
  radius = 0
  unless rotate.zero?
    radius = rotate / 180.0 * Math::PI
    if (90 < rotate and rotate < 180) or
        (270 < rotate and rotate < 360)
      radius -= Math::PI / 2
    end
  end
  inner_angle1 = Math.atan(width / height)
  inner_angle2 = Math.atan(height / width)
  diagonal = Math.sqrt(width ** 2 + height ** 2)

  angle1 = radius + inner_angle1
  angle2 = radius + inner_angle2

  bottom1 = diagonal * Math.cos(angle1)
  length1 = (bottom1 * Math.tan(angle1)).abs.to_i
  bottom2 = diagonal * Math.cos(angle2)
  length2 = (bottom2 * Math.tan(angle2)).abs.to_i

  if (0 <= rotate and rotate <= 90) or
      (180 <= rotate and rotate <= 270)
    [length1, length2]
  else
    [length2, length1]
  end
end

def to_pixbuf_with_cairo(page, scale, rotate)
  width, height = page.size.collect {|x| x * scale}
  surface_width, surface_height = compute_size(width, height, rotate)

  surface = Cairo::ImageSurface.new(Cairo::FORMAT_ARGB32,
                                    surface_width, surface_height)
  cr = Cairo::Context.new(surface)

  half_width = surface_width / 2.0
  half_height = surface_height / 2.0
  cr.translate(half_width, half_height)
  cr.rotate(rotate / 180.0 * Math::PI)
  cr.translate(-half_width, -half_height)

  cr.translate((surface_width - width) / 2.0,
               (surface_height - height) / 2.0)
  cr.set_source_rgb(1, 1, 1)
  cr.rectangle(0, 0, width, height)
  cr.fill

  cr.scale(scale, scale)
  cr.render_poppler_page(page)
  temp = Tempfile.new("pdf2")
  cr.target.write_to_png(temp.path)
  cr.target.finish
  Gdk::Pixbuf.new(temp.path)
end

format = ARGV[0]
src    = ARGV[1]
dest   = ARGV[2]

FileUtils.rm_rf(dest) if File.exist?(dest)
Dir.mkdir(dest)

Dir.glob("#{src}/*.pdf").each do | file |
    doc = Poppler::Document.new(file)
    puts file
    0.upto(doc.n_pages()-1).each do |pg|
        page = doc[pg]
        [1000,700,180,60].each do | width |
            scale = width.to_f / page.size[0]
            pixbuf = to_pixbuf_with_cairo( page, scale, rotate)
            base = File.basename(file,'.pdf')
            output = sprintf("%s/%s-%d-%d.%s",dest,base,pg,width,format)
            pixbuf.save( output, format )
        end
    end
end



__END__


FORMAT=$1
SRC=$2
DEST=$3

if [ -d "$DEST" ]; then
  rm -r $DEST
fi

mkdir $DEST

PDFS=$SRC/*
for pdf in $PDFS
do
  echo "Processing $pdf file..."
  base=`basename $pdf .pdf`
  pdftocairo -png -scale-to-x 1000 $pdf $DEST/$base-1000
  pdftocairo -png -scale-to-x 700  $pdf $DEST/$base-700
  pdftocairo -png -scale-to-x 180  $pdf $DEST/$base-180
  pdftocairo -png -scale-to-x 60   $pdf $DEST/$base-60
done


if [ "$FORMAT" == "gif" ]; then
   echo "NO GIFS (yet)"
fi
